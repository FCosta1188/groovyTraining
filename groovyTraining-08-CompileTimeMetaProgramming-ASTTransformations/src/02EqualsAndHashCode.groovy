//https://docs.groovy-lang.org/next/html/gapi/groovy/transform/EqualsAndHashCode.html
/*
hashCode() returns an integer value, generated by a hashing algorithm.
Objects that are equal (according to their equals()) must return the same hash code.
Different objects do not need to return different hash codes.

The general contract of hashCode() states:
-   Whenever it is invoked on the same object more than once during an execution of a Java application,
    hashCode() must consistently return the same value, provided no information used in equals comparisons on the object is modified.
    This value doesn’t need to stay consistent from one execution of an application to another execution of the same application.
-   If two objects are equal according to the equals(Object) method,
    calling the hashCode() method on each of the two objects must produce the same value.
-   If two objects are unequal according to the equals(java.lang.Object) method,
    calling the hashCode method on each of the two objects doesn’t need to produce distinct integer results.
    However, developers should be aware that producing distinct integer results for unequal objects improves the performance of hash tables.

As much as is reasonably practical, the hashCode() method defined by class Object does return distinct integers for distinct objects.
(This is typically implemented by converting the internal address of the object into an integer,
but this implementation technique is not required by the JavaTM programming language).
*/
import groovy.transform.EqualsAndHashCode

@EqualsAndHashCode(excludes = ["email"]) // excludes properties from the equals() comparison
class Person {
    String first
    String last
    String email
}

Person p1 = new Person(first:"Dan",last: "Vega",email: "danvega@gmail.com")
println p1.hashCode()
Person p2 = new Person(first:"Dan",last: "Vega",email: "dvega@work.com")
println p2.hashCode()
assert p1 == p2
println"--------------------------"